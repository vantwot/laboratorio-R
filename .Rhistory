editrules::violatedEdits(Rules, xlm_object_trans)
Valid_Data = editrules::violatedEdits(Rules, xlm_object_trans)
summary(Valid_Data)
# Visualización del diagnóstico
windows()
plot(Valid_Data)
#Eliminar datos erroneos para más adelante corregir
xlm_object_trans$validaciones <- Valid_Data
xlm_object_trans <- xlm_object_trans[xlm_object_trans$validaciones == FALSE,]
#**********  Mostrar datos faltantes  **********#
is.na(xlm_object_trans)  #Lista que me muestra los valores faltantes
x11()
visdat::vis_dat(xlm_object_trans)
names(xlm_object_trans) = xlm_object_trans$País
Rules <- editrules::editfile("consistencia.txt")
#Eliminación de los errores para más adelante corregirlos
xlm_object_trans$validaciones <- Valid_Data
error1 = xlm_object_trans
error1$Esperanza.vida.mujer = ifelse(error1$validaciones == FALSE,
error1$Esperanza.vida.mujer, NA)
View(error1)
View(xlm_object_trans)
View(Datos)
View(xlm_object_trans)
View(Datos)
View(Datos)
View(xlm_object_trans)
View(xlm_object_trans)
# Carga del archivo de reglas de validación
Rules <- editrules::editfile("consistencia.txt")
# Conexión entre las  reglas
windows()
plot(Rules)
plot(Rules)
# Verificación de las reglas sobres los datos
editrules::violatedEdits(Rules, xlm_object_trans)
Valid_Data = editrules::violatedEdits(Rules, xlm_object_trans)
summary(Valid_Data)
# Visualización del diagnóstico
windows()
plot(Valid_Data)
#Eliminación del error 1 para más adelante corregirlos
xlm_object_trans$validaciones1 <- Valid_Data[, 1]
xlm_object_trans$Esperanza.vida.mujer = ifelse(xlm_object_trans$validaciones1 == FALSE,
xlm_object_trans$Esperanza.vida.mujer, NA)
#Eliminación del error 2 para más adelante corregirlos
xlm_object_trans$validaciones2 <- Valid_Data[, 2]
error2 = xlm_object_trans
error2$Mortalidad.infantil = ifelse(error2$validaciones2 == FALSE,
error2$Tasa.mortalidad, NA)
View(error2)
xlm_object_trans$Mortalidad.infantil = ifelse(xlm_object_trans$validaciones2 == FALSE,
xlm_object_trans$Tasa.mortalidad, NA)
View(error1)
View(error1)
rm(error1)
rm(error2)
View(Rules)
library("easypackages")
#Librerias necesarias para el script
lib_req<-c("lubridate","dplyr","visdat","missMDA","mice","DMwR2","editrules", "corrplot")
#Llamando librerias necesarias
lapply(c("readxl", "stringr", "dplyr", "visdat", "editrules", "ggplot2", "ggrepel", "data.table"), require, character.only = TRUE)
#Librerias necesarias para el script
lib_req<-c("lubridate","dplyr","visdat","missMDA","mice","DMwR2","editrules", "corrplot")
#Llamando librerias necesarias
lapply(c("readxl", "stringr", "dplyr", "visdat", "editrules", "ggplot2", "ggrepel", "data.table"), require, character.only = TRUE)
#Leer archivo xls
xlm_object <- read_xls("paises.xls")
table(xlm_object$GRUPOS)
asia = c(ASIA = "ASIA", Asia = "ASIA", asia = "ASIA")
africa = c(AFRICA = "AFRICA", Africa = "AFRICA", africa = "AFRICA")
eu_oriental = c("Europa Oriental" = "EUROPA ORIENTAL")
iberoamerica = c("Iberoamerica" = "IBEROAMERICA", "iberoamerica" = "IBEROAMERICA")
key_field_groups = c(asia, africa, eu_oriental, iberoamerica)
xlm_object_trans = transform(xlm_object,
GRUPOS = factor(dplyr::recode(GRUPOS, !!!key_field_groups)))
rm(asia, africa, eu_oriental, iberoamerica, key_field_groups)
str(xlm_object_trans)
# Carga del archivo de reglas de validación
Rules <- editrules::editfile("consistencia.txt")
# Conexión entre las  reglas
windows()
plot(Rules)
# Verificación de las reglas sobres los datos
editrules::violatedEdits(Rules, xlm_object_trans)
Valid_Data = editrules::violatedEdits(Rules, xlm_object_trans)
summary(Valid_Data)
# Visualización del diagnóstico
windows()
plot(Valid_Data)
#Corregir error1
xlm_object_trans$validaciones1 <- Valid_Data[, 1]
xlm_object_trans$Esperanza.vida.mujer = ifelse(xlm_object_trans$validaciones1 == FALSE,
xlm_object_trans$Esperanza.vida.mujer,
round(xlm_object_trans$Esperanza.vida.hombre * 1.12,1))
#Corregir error 3
xlm_object_trans$validaciones3 <- Valid_Data[, 3]
# Carga del archivo de reglas de validación
Rules <- editrules::editfile("consistencia.txt")
# Verificación de las reglas sobres los datos
editrules::violatedEdits(Rules, xlm_object_trans)
Valid_Data = editrules::violatedEdits(Rules, xlm_object_trans)
summary(Valid_Data)
#Correción error 1
xlm_object_trans$validaciones1 <- Valid_Data[, 1]
xlm_object_trans$Esperanza.vida.mujer = ifelse(xlm_object_trans$validaciones1 == FALSE,
xlm_object_trans$Esperanza.vida.mujer,
round(xlm_object_trans$Esperanza.vida.hombre * 1.12,1))
#Correción error 2
xlm_object_trans$validaciones3 <- Valid_Data[, 2]
xlm_object_trans$Esperanza.vida.mujer = ifelse(xlm_object_trans$validaciones3 == FALSE,
xlm_object_trans$Esperanza.vida.mujer,
round(xlm_object_trans$Esperanza.vida.hombre * 1.12,1))
#----------------------------------------------------------------------#
#### 3. PNB POR GRUPOS                                              ####
#----------------------------------------------------------------------#
x <- xlm_object_trans[,c("PNB","GRUPOS")]
x
#----------------------------------------------------------------------#
#### 3. PNB POR GRUPOS                                              ####
#----------------------------------------------------------------------#
y <- xlm_object_trans$PNB/xlm_object_trans$Poblacion.miles
y
prom <- mean(x$PNB)
prom
#----------------------------------------------------------------------#
#### 3. PNB POR GRUPOS                                              ####
#----------------------------------------------------------------------#
xlm_object_trans$y <- xlm_object_trans$PNB/xlm_object_trans$Poblacion.miles
long <- xlm_object_trans %>% group_by(GRUPOS) %>% summarise(valor2 = mean(y, rm.na = TRUE))
library("easypackages")
#Librerias necesarias para el script
lib_req<-c("lubridate","dplyr","visdat","missMDA","mice","DMwR2","editrules", "corrplot")
#Llamando librerias necesarias
lapply(c("readxl", "stringr", "dplyr", "visdat", "editrules", "ggplot2", "ggrepel", "data.table"), require, character.only = TRUE)
#Librerias necesarias para el script
lib_req<-c("lubridate","dplyr","visdat","missMDA","mice","DMwR2","editrules", "corrplot")
#Llamando librerias necesarias
lapply(c("readxl", "stringr", "dplyr", "visdat", "editrules", "ggplot2", "ggrepel", "data.table"), require, character.only = TRUE)
#----------------------------------------------------------------------#
#### 3. PNB POR GRUPOS                                              ####
#----------------------------------------------------------------------#
xlm_object_trans$y <- xlm_object_trans$PNB/xlm_object_trans$Poblacion.miles
long <- xlm_object_trans %>% group_by(GRUPOS) %>% summarise(valor2 = mean(y, rm.na = TRUE))
long
xlm_object_trans$y
#----------------------------------------------------------------------#
#### 3. PNB POR GRUPOS                                              ####
#----------------------------------------------------------------------#
xlm_object_trans$y <- xlm_object_trans$PNB/xlm_object_trans$Poblacion.miles
long <- xlm_object_trans %>% group_by(GRUPOS) %>% mutate(valor2 = mean(y, rm.na = TRUE))
long
long$valor2
df[df$GRUPOS == "AFRICA", "y"]
xlm_object_trans[df$GRUPOS == "AFRICA", "y"]
xlm_object_trans[xlm_object_trans$GRUPOS == "AFRICA", "y"]
xlm_object_trans[xlm_object_trans$GRUPOS == "AFRICA", "y"]  %>% mean(rm.na = TRUE)
#----------------------------------------------------------------------#
#### 3. PNB POR GRUPOS                                              ####
#----------------------------------------------------------------------#
xlm_object_trans$y <- xlm_object_trans$PNB/xlm_object_trans$Poblacion.miles
long <- xlm_object_trans %>% group_by(GRUPOS) %>% summarise(valor2 = mean(y, na.rm=TRUE))
long$valor2
long
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=2, notch=FALSE)
p <- ggplot(ToothGrowth, aes(x=long$GRUPOS, y=long$valor2)) +
geom_boxplot()
p
p <- ggplot(ToothGrowth, aes(x=long$valor2, y=long$GRUPOS)) +
geom_boxplot()
p
p <- ggplot(ToothGrowth, aes(x=long, y=long$valor2)) +
geom_boxplot()
p
boxplot(long)
boxplot(long$valor2)
p <- ggplot(long, aes(x=valor2, fill=GRUPOS)) +
geom_boxplot()
p
p <- ggplot(long, aes(y=valor2, fill=GRUPOS, x=GRUPOS)) +
geom_boxplot()
p
p <- ggplot(xlm_object_trans, aes(y=y, fill=GRUPOS, x=GRUPOS)) +
geom_boxplot()
p
p <- ggplot(xlm_object_trans, aes(y=y, fill=GRUPOS, x=GRUPOS)) +
geom_boxplot() +  + ggtitle("PNB per cápita")
p
p <- ggplot(xlm_object_trans, aes(y=y, fill=GRUPOS, x=GRUPOS)) +
geom_boxplot() + ggtitle("PNB per cápita")
p
p <- ggplot(xlm_object_trans, aes(y=y, fill=GRUPOS, x=GRUPOS)) +
geom_boxplot() + ggtitle("PNB per cápita") + ylab("PNB per cápita")
p
#cuartiles
q1 <- long[(n+1) * 25/100]; q1
#cuartiles
q1 <- long$valor2[(n+1) * 25/100]; q1
Q1 <- quantile(long$valor2, c(0.25), type = 6); Q1
Q1 <- quantile(long$valor2, c(0.25), type = 6); Q1
Q2 <- quantile(long$valor2, c(0.50), type = 6); Q2
Q3 <- quantile(long$valor2, c(0.55), type = 6); Q3
Q3 <- quantile(long$valor2, c(0.75), type = 6); Q3
Bajo <- quantile(long$valor2, c(0.25)); Bajo
long[long$valor2 < q1]<-"BAJO"
long
Q1 <- quantile(xlm_object_trans$y, c(0.25), type = 6); Q1
xlm_object_trans$y
Q1 <- quantile(xlm_object_trans$y, c(0.25), type = 6); Q1
Q1 <- quantile(xlm_object_trans$y, na.rm = TRUE, c(0.25), type = 6); Q1
Q2 <- quantile(xlm_object_trans$y, na.rm = TRUE, c(0.50), type = 6); Q2
Q3 <- quantile(xlm_object_trans$y, na.rm = TRUE, c(0.75), type = 6); Q3
xlm_object_trans$TIPO <- "BAJO"
xlm_object_trans$TIPO[xlm_object_trans$y => Q1 & xlm_object_trans$y < Q2] <- "MEDIO_BAJO"
xlm_object_trans$TIPO[xlm_object_trans$y >= Q1 & xlm_object_trans$y < Q2] <- "MEDIO_BAJO"
xlm_object_trans$TIPO[xlm_object_trans$y >= Q2 & xlm_object_trans$y < Q3] <- "MEDIO_ALTO"
xlm_object_trans$TIPO[xlm_object_trans$y > Q3] <- "ALTO"
x <- xlm_object_trans[,c("TIPO","GRUPOS")]
x
long <- melt(setDT(x), id.vars = c("GRUPOS"), variable.name = "Riqueza")
long <- long %>% group_by(Riqueza, GRUPOS) %>% summarise(valor2 = mean(y, rm.na = TRUE))
long
long <- long %>% group_by(Riqueza, GRUPOS) %>% summarise(valor2 = mean(y, na.rm = TRUE))
long
x
x <- xlm_object_trans[,c("TIPO","GRUPOS", "y")]
x
long <- melt(setDT(x), id.vars = c("GRUPOS"), variable.name = "Riqueza")
x <- x %>% group_by(TIPO, GRUPOS) %>% summarise(valor2 = mean(y, na.rm = TRUE))
x
x <- xlm_object_trans[,c("TIPO","GRUPOS", "y", "País")]
x
x <- x %>% group_by(TIPO, GRUPOS) %>% summarise(valor2 = count(y, na.rm = TRUE))
x <- x %>% group_by(TIPO, GRUPOS) %>% summarise(valor2 = count(x$País, na.rm = TRUE))
x <- x %>% group_by(TIPO, GRUPOS) %>% summarise(valor2 = sum(y, na.rm = TRUE))
x
X %>% group_by(tipo,grupo) %>% count()
x %>% group_by(tipo,grupo) %>% count()
x
xlm_object_trans %>% group_by(TIPO,GRUPOS) %>% count()
ggplot(long, aes(fill=TIPO, y=x, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = x, label = paste(x), group = TIPO),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
ggplot(long, aes(fill=x$TIPO, y=x, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = x, label = paste(x), group = TIPO),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
a <- xlm_object_trans %>% group_by(TIPO,GRUPOS) %>% count()
a
ggplot(long, aes(fill=a$TIPO, y=a$n, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = a$n, label = paste(a$n), group = a$TIPO),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
ggplot(long, aes(fill=Indicadores, y=valor2, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = valor2, label = paste(round(valor2,1), "%"), group = Indicadores),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
#----------------------------------------------------------------------#
#### 2. Indicadores de tasas de mortalidad y natalidad              ####
#----------------------------------------------------------------------#
x <- xlm_object_trans[,c("Tasa.natalidad","Tasa.mortalidad","Mortalidad.infantil","GRUPOS")]
long <- melt(setDT(x), id.vars = c("GRUPOS"), variable.name = "Indicadores")
long <- long %>% group_by(Indicadores, GRUPOS) %>% summarise(valor2 = mean(value, rm.na = TRUE))
ggplot(long, aes(fill=Indicadores, y=valor2, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = valor2, label = paste(round(valor2,1), "%"), group = Indicadores),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
ggplot(long, aes(fill=a$TIPO, y=a$n, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = a$n, label = paste(a$n), group = a$TIPO),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
a
ggplot(long, aes(fill=a$TIPO, y=a$n, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = a$n, label = paste(a$n), group = a$TIPO),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
ggplot(a, aes(fill=TIPO, y=n, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = n, label = paste(n), group = TIPO),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
install.packages("mice")
library(mice)
#Imputación por promedio
imputM = mice::mice(xlm_object_trans, maxit = 1, method = "mean", seed = 2018, print = F)
xlm_object_trans_imputM = mice::complete(imputM)
#Imputación por regresión
imputR = mice::mice(xlm_object_trans, maxit = 1, method = "norm.predict", seed = 2018, print = F)
xlm_object_trans_imputR = mice::complete(imputR)
# VISUALIZACIÓN DE DATOS
install.packages("mice")
View(xlm_object_trans_imputM)
View(xlm_object_trans_imputR)
corrplot::corrplot(cor(xlm_object_trans_imputR[2:9]))
x11()
corrplot::corrplot(cor(xlm_object_trans_imputR[2:9]))
save(xlm_object_trans_imputR, file="ImputacionDatos.RData")
load("~/Desktop/laboratorio-R/ImputacionDatos.RData")
save(xlm_object_trans_imputR, file="ImputacionDatos.xlm")
save(xlm_object_trans_imputR, file="ImputacionDatos.r")
save(xlm_object_trans_imputR, file="ImputacionDatos.xls")
paises_imputados <- read_xls("datos.xls")
paises_imputados <- read_xls("ImputacionDatos.xls")
save(xlm_object_trans_imputR, file="ImputacionDatos.xls")
paises_imputados <- read_xls("ImputacionDatos.xls")
saveRDS(xlm_object_trans_imputR, file = "supapa.rds")
si = readRDS(file = "supapa.rds")
View(si)
library("easypackages")
#Librerias necesarias para el script
lib_req<-c("lubridate","dplyr","visdat","missMDA","mice","DMwR2","editrules", "corrplot")
#Llamando librerias necesarias
lapply(c("readxl", "stringr", "dplyr", "visdat", "editrules", "ggplot2", "ggrepel", "data.table"), require, character.only = TRUE)
#Leer archivo xls
xlm_object <- read_xls("paises.xls")
table(xlm_object$GRUPOS)
asia = c(ASIA = "ASIA", Asia = "ASIA", asia = "ASIA")
africa = c(AFRICA = "AFRICA", Africa = "AFRICA", africa = "AFRICA")
eu_oriental = c("Europa Oriental" = "EUROPA ORIENTAL")
iberoamerica = c("Iberoamerica" = "IBEROAMERICA", "iberoamerica" = "IBEROAMERICA")
key_field_groups = c(asia, africa, eu_oriental, iberoamerica)
xlm_object_trans = transform(xlm_object,
GRUPOS = factor(dplyr::recode(GRUPOS, !!!key_field_groups)))
rm(asia, africa, eu_oriental, iberoamerica, key_field_groups)
str(xlm_object_trans)
# Carga del archivo de reglas de validación
Rules <- editrules::editfile("consistencia.txt")
# Conexión entre las  reglas
windows()
plot(Rules)
# Verificación de las reglas sobres los datos
editrules::violatedEdits(Rules, xlm_object_trans)
Valid_Data = editrules::violatedEdits(Rules, xlm_object_trans)
summary(Valid_Data)
# Visualización del diagnóstico
windows()
plot(Valid_Data)
#Correción error 1
xlm_object_trans$validaciones1 <- Valid_Data[, 1]
xlm_object_trans$Esperanza.vida.mujer = ifelse(xlm_object_trans$validaciones1 == FALSE,
xlm_object_trans$Esperanza.vida.mujer,
round(xlm_object_trans$Esperanza.vida.hombre * 1.12,1))
#Correción error 2
xlm_object_trans$validaciones3 <- Valid_Data[, 2]
xlm_object_trans$Esperanza.vida.mujer = ifelse(xlm_object_trans$validaciones3 == FALSE,
xlm_object_trans$Esperanza.vida.mujer,
round(xlm_object_trans$Esperanza.vida.hombre * 1.12,1))
is.na(xlm_object_trans)  #Lista que me muestra los valores faltantes
is.na(xlm_object_trans)  #Lista que me muestra los valores faltantes
x11()
visdat::vis_dat(xlm_object_trans)
graph_na_fields = function(d, plot=T) {
rows = nrow(d)
cols = ncol(d)
nombres_row = rownames(d)
#Numero de filas completas
rows_completed = sum(complete.cases(d))
#indices de los datos completos
index_completed = which(complete.cases(d))
#Numero de filas con NA
rows_incompleted = sum(!complete.cases(d))
#Indices de las filas imcompletas
index_incompleted = which(!complete.cases(d))
data_na = is.na(d)
#suma el numero de Trues en las columnas, recordar que los True indican que en
# ese campo hay un dato NA
number_na_col = sort(colSums(data_na), decreasing = T)
#Porcentaje de valores NA por columna, lo redondea
percent_na_col = round(number_na_col/rows, 2)
#Suma el numero de Trues en las filas
number_na_row = sort(rowSums(data_na), decreasing = T)
#Porcentaje de na por fila
percent_na_row = round(number_na_row/cols, 2)
lst = list(num_rows = rows,
num_col = cols,
total_complete = rows_completed,
index_completed = index_completed,
rows_incompleted = rows_incompleted,
index_incompleted = index_incompleted,
number_na_col = number_na_col,
percent_na_col = percent_na_col,
number_na_row = number_na_row,
percent_na_row = percent_na_row)
if(plot) {
windows(width = 10, height = 10)
par(mfrow=c(1,2))
coord <- barplot(percent_na_col, plot = F)
barplot(percent_na_col,xaxt="n",horiz=T,yaxt="n",xlim=c(-0.2,1), ylim=c(0,max(coord)+1),main= "% datos faltantes por variable")
axis(2,at=coord,labels=names(percent_na_col), cex.axis=0.5,pos=0,las=2)
axis(1,seq(0,1,0.2),seq(0,1,0.2),pos=0)
coord<-barplot(percent_na_row, plot=F)
barplot(percent_na_row,xaxt="n",horiz=T,yaxt="n",xlim=c(-0.2,1), ylim=c(0,max(coord)+1),main= "% datos faltantes por registro")
axis(2,at=coord,labels=names(percent_na_row),cex.axis=0.5,pos=0,las=2)
axis(1,seq(0,1,0.2),seq(0,1,0.2))
}
return(invisible(lst))
}
result_graph = graph_na_fields(xlm_object_trans)
install.packages("mice")
install.packages("mice")
library(mice)
#Imputación por regresión
imputR = mice::mice(xlm_object_trans, maxit = 1, method = "norm.predict", seed = 2018, print = F)
xlm_object_trans_imputR = mice::complete(imputR)
saveRDS(xlm_object_trans_imputR, file = "imputacionDatos.rds")
si = readRDS(file = "imputacionDatos.rds")
View(xlm_object_trans_imputR)
grupos <- si %>% group_by(GRUPOS) %>% count()
grupos$eti <- round(100 * grupos$n/sum(grupos$n), 2)
ggplot(grupos, aes(x = GRUPOS, y = eti, fill = GRUPOS)) +
geom_bar(width = 1, stat = "identity", color="white", alpha=0.8) +
ylab("porcentaje") + geom_text(aes(label = paste(eti,"%"), vjust=-0.6))+
theme(legend.position = "none") + ggtitle("Distribución por grupos")
#----------------------------------------------------------------------#
#### 2. Indicadores de tasas de mortalidad y natalidad              ####
#----------------------------------------------------------------------#
x <- si[,c("Tasa.natalidad","Tasa.mortalidad","Mortalidad.infantil","GRUPOS")]
long <- melt(setDT(x), id.vars = c("GRUPOS"), variable.name = "Indicadores")
long <- long %>% group_by(Indicadores, GRUPOS) %>% summarise(valor2 = mean(value))
ggplot(long, aes(fill=Indicadores, y=valor2, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = valor2, label = paste(round(valor2,1), "%"), group = Indicadores),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
saveRDS(xlm_object_trans_imputR, file = "imputacionDatos.rds")
imputadosf = readRDS(file = "imputacionDatos.rds")
grupos <- imputadosf %>% group_by(GRUPOS) %>% count()
grupos$eti <- round(100 * grupos$n/sum(grupos$n), 2)
ggplot(grupos, aes(x = GRUPOS, y = eti, fill = GRUPOS)) +
geom_bar(width = 1, stat = "identity", color="white", alpha=0.8) +
ylab("porcentaje") + geom_text(aes(label = paste(eti,"%"), vjust=-0.6))+
theme(legend.position = "none") + ggtitle("Distribución por grupos")
#----------------------------------------------------------------------#
#### 2. Indicadores de tasas de mortalidad y natalidad              ####
#----------------------------------------------------------------------#
x <- imputadosf[,c("Tasa.natalidad","Tasa.mortalidad","Mortalidad.infantil","GRUPOS")]
long <- melt(setDT(x), id.vars = c("GRUPOS"), variable.name = "Indicadores")
long <- long %>% group_by(Indicadores, GRUPOS) %>% summarise(valor2 = mean(value))
ggplot(long, aes(fill=Indicadores, y=valor2, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = valor2, label = paste(round(valor2,1), "%"), group = Indicadores),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
#----------------------------------------------------------------------#
#### 2. Indicadores de tasas de mortalidad y natalidad              ####
#----------------------------------------------------------------------#
x <- imputadosf[,c("Tasa.natalidad","Tasa.mortalidad","Mortalidad.infantil","GRUPOS")]
long <- melt(setDT(x), id.vars = c("GRUPOS"), variable.name = "Indicadores")
long <- long %>% group_by(Indicadores, GRUPOS) %>% summarise(valor1 = mean(value))
ggplot(long, aes(fill=Indicadores, y=valor1, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = valor1, label = paste(round(valor1,1), "%"), group = Indicadores),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
#----------------------------------------------------------------------#
#### 3. PNB POR GRUPOS                                              ####
#----------------------------------------------------------------------#
imputadosf$y <- imputadosf$PNB/imputadosf$Poblacion.miles
long1 <- imputadosf %>% group_by(GRUPOS) %>% summarise(valor2 = mean(y, na.rm=TRUE))
long1
boxplot(long1$valor2)
p <- ggplot(imputadosf, aes(y=y, fill=GRUPOS, x=GRUPOS)) +
geom_boxplot() + ggtitle("PNB per cápita") + ylab("PNB per cápita")
p
ppc <- ggplot(imputadosf, aes(y=y, fill=GRUPOS, x=GRUPOS)) +
geom_boxplot() + ggtitle("PNB per cápita") + ylab("PNB per cápita")
ppc
#----------------------------------------------------------------------#
#### 3. PNB POR GRUPOS                                              ####
#----------------------------------------------------------------------#
imputadosf$y <- imputadosf$PNB/imputadosf$Poblacion.miles
long1 <- imputadosf %>% group_by(GRUPOS) %>% summarise(valor2 = mean(y))
long1
ppc <- ggplot(imputadosf, aes(y=y, fill=GRUPOS, x=GRUPOS)) +
geom_boxplot() + ggtitle("PNB per cápita") + ylab("PNB per cápita")
ppc
Q1 <- quantile(imputadosf$y, na.rm = TRUE, c(0.25), type = 6); Q1
Q2 <- quantile(imputadosf$y, na.rm = TRUE, c(0.50), type = 6); Q2
Q3 <- quantile(imputadosf$y, na.rm = TRUE, c(0.75), type = 6); Q3
imputadosf$TIPO <- "BAJO"
imputadosf$TIPO[imputadosf$y >= Q1 & imputadosf$y < Q2] <- "MEDIO_BAJO"
imputadosf$TIPO[imputadosf$y >= Q2 & imputadosf$y < Q3] <- "MEDIO_ALTO"
imputadosf$TIPO[imputadosf$y > Q3] <- "ALTO"
z <- imputadosf[,c("TIPO","GRUPOS", "y", "País")]
a <- imputadosf %>% group_by(TIPO,GRUPOS) %>% count()
ggplot(a, aes(fill=TIPO, y=n, x=GRUPOS)) +
geom_bar(position="dodge", stat="identity") +
ylab("porcentaje") + geom_text(
aes(x = GRUPOS, y = n, label = paste(n), group = TIPO),
position = position_dodge(width = 1),
vjust = -0.5, size = 4 ) + ggtitle("Indicadores de tasas de mortalidad y natalidad")
